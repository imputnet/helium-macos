--- /dev/null
+++ b/third_party/sparkle/README.chromium
@@ -0,0 +1,15 @@
+Name: Sparkle
+Short Name: sparkle
+URL: https://github.com/sparkle-project/Sparkle
+Version: 2.7.1
+Date: 2025-06-28
+License: MIT
+License File: LICENSE
+Shipped: yes
+Security Critical: yes
+
+Description:
+Used for automatic updates on macOS.
+
+Local Modifications:
+Patches are applied to integrate Sparkle into Chromium and hide the Sparkle UI.
--- a/build/apple/tweak_info_plist.py
+++ b/build/apple/tweak_info_plist.py
@@ -189,6 +189,21 @@ def _RemoveBreakpadKeys(plist):
               'BreakpadSendAndExit', 'BreakpadSkipConfirm')
 
 
+def _AddSparkleKeys(plist, ed_key, auto_checks, check_interval):
+  plist['SUPublicEDKey'] = ed_key
+  plist['SUEnableAutomaticChecks'] = 'YES' if auto_checks else 'NO'
+  plist['SUScheduledCheckInterval'] = check_interval
+  plist['SUVerifyUpdateBeforeExtraction'] = 'YES'
+  plist['SUShowReleaseNotes'] = 'NO'
+
+
+def _RemoveSparkleKeys(plist):
+  """Removes any set Sparkle keys."""
+  _RemoveKeys(plist, 'SUPublicEDKey', 'SUEnableAutomaticChecks',
+              'SUScheduledCheckInterval', 'SUVerifyUpdateBeforeExtraction',
+              'SUShowReleaseNotes')
+
+
 def _TagSuffixes():
   # Keep this list sorted in the order that tag suffix components are to
   # appear in a tag value. That is to say, it should be sorted per ASCII.
@@ -279,6 +294,29 @@ def Main(argv):
       action='store_true',
       default=False,
       help='Use staging breakpad to upload reports. Ignored if --breakpad=0.')
+  parser.add_option('--sparkle',
+                    dest='use_sparkle',
+                    action='store',
+                    type='int',
+                    default=False,
+                    help='Enable Sparkle [1 or 0]')
+  parser.add_option('--sparkle_ed_key',
+                    dest='sparkle_ed_key',
+                    action='store',
+                    default=None,
+                    help='Sparkle update signing EdDSA key')
+  parser.add_option('--sparkle_automatic_checks',
+                    dest='sparkle_automatic_checks',
+                    action='store',
+                    type='int',
+                    default=False,
+                    help='Enable Sparkle automatic checks [1 or 0]')
+  parser.add_option('--sparkle_check_interval',
+                    dest='sparkle_check_interval',
+                    action='store',
+                    type='int',
+                    default=0,
+                    help='Sparkle check interval (min: 3600)')
   parser.add_option('--keystone',
                     dest='use_keystone',
                     action='store',
@@ -420,6 +458,20 @@ def Main(argv):
   else:
     _RemoveKeystoneKeys(plist)
 
+  # Add Sparkle parameters if configured to do so.
+  if options.use_sparkle:
+    if not options.sparkle_ed_key:
+      print('Sparkle updates require an EdDSA key.', file=sys.stderr)
+      return 1
+    if options.sparkle_check_interval < 3600:
+      print('Sparkle update check interval must be at least 1 hour (3600).', file=sys.stderr)
+      return 1
+    _AddSparkleKeys(plist, options.sparkle_ed_key,
+                    options.sparkle_automatic_checks,
+                    options.sparkle_check_interval)
+  else:
+    _RemoveSparkleKeys(plist)
+
   # Adds or removes any SCM keys.
   if not _DoSCMKeys(plist, options.add_scm_info):
     return 3
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -51,6 +51,7 @@ if (is_android) {
   import("//build/util/branding.gni")
   import("//chrome/browser/buildflags.gni")
   import("//chrome/updater/branding.gni")
+  import("//chrome/updater/sparkle.gni")
   import("//chrome/version.gni")
   import("//content/public/app/mac_helpers.gni")
   import("//media/cdm/library_cdm/cdm_paths.gni")
@@ -501,6 +502,20 @@ if (is_win) {
     } else {
       args += [ "--keystone=0" ]
     }
+
+    if (enable_sparkle) {
+      assert(sparkle_ed_key != "")
+
+      args += [
+        "--sparkle=1",
+        "--sparkle_ed_key=$sparkle_ed_key",
+        "--sparkle_check_interval=$sparkle_check_interval",
+      ]
+
+      if (sparkle_automatic_checks) {
+        args += [ "--sparkle_automatic_checks=1" ]
+      }
+    }
   }
 
   mac_app_bundle("chrome_app") {
@@ -1139,6 +1154,10 @@ if (is_win) {
 
     if (is_component_build) {
       frameworks = [ "Carbon.framework" ]
+
+      if (enable_sparkle) {
+        configs += [ "//third_party/sparkle:sparkle_link_test" ]
+      }
     }
 
     ldflags = [ "-ObjC" ]
@@ -1187,6 +1206,7 @@ if (is_win) {
       "//components/webapps/isolated_web_apps/preload:component_bundle",
     ]
 
+
     if (is_chrome_branded) {
       bundle_deps += [ ":preinstalled_apps" ]
     }
@@ -1195,6 +1215,12 @@ if (is_win) {
       bundle_deps += [ ":angle_binaries" ]
     }
 
+    if (enable_sparkle) {
+      bundle_deps += [ "//third_party/sparkle:sparkle_framework" ]
+      configs += [ "//third_party/sparkle:sparkle_link_framework" ]
+      framework_contents += [ "Frameworks" ]
+    }
+
     configs += [ ":chrome_dll_symbol_order" ]
     if (!is_component_build && !using_sanitizer) {
       configs += [ ":chrome_dll_symbol_exports" ]
--- /dev/null
+++ b/chrome/updater/sparkle.gni
@@ -0,0 +1,17 @@
+# Copyright 2025 The Helium Authors
+# You can use, redistribute, and/or modify this source code under
+# the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+declare_args() {
+  # Enable automatic update checking via Sparkle.
+  enable_sparkle = false
+
+  # SUPublicEDKey: EdDSA key used for signing Sparkle updates.
+  sparkle_ed_key = ""
+
+  # SUEnableAutomaticChecks: enable automatic checking of updates
+  sparkle_automatic_checks = false
+
+  # SUScheduledCheckInterval: number of seconds between update checks (min: 3600)
+  sparkle_check_interval = 3600
+}
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -9,6 +9,7 @@ import("//build/config/ozone.gni")
 import("//build/config/ui.gni")
 import("//chrome/browser/buildflags.gni")
 import("//chrome/common/features.gni")
+import("//chrome/updater/sparkle.gni")
 import("//chromeos/ash/components/assistant/assistant.gni")
 import("//components/compose/features.gni")
 import("//components/enterprise/buildflags/buildflags.gni")
@@ -3177,11 +3178,9 @@ static_library("ui") {
       "webui/settings/settings_utils_mac.mm",
     ]
 
-    if (enable_updater) {
-      sources += [
-        "cocoa/keystone_infobar_delegate.cc",
-        "cocoa/keystone_infobar_delegate.h",
-      ]
+    if (enable_sparkle) {
+      sources -= [ "webui/help/version_updater_mac.mm" ]
+      public_configs = [ "//third_party/sparkle:sparkle_link_test" ]
     }
 
     # Any circular includes must depend on the target "//chrome/browser:browser_public_dependencies".
--- a/third_party/sparkle/Sparkle.xcodeproj/project.pbxproj
+++ b/third_party/sparkle/Sparkle.xcodeproj/project.pbxproj
@@ -446,6 +446,8 @@
 		72F9EC441D5E9ED8004AC8B6 /* SPUDownloadData.h in Headers */ = {isa = PBXBuildFile; fileRef = 72F9EC421D5E9ED8004AC8B6 /* SPUDownloadData.h */; settings = {ATTRIBUTES = (Public, ); }; };
 		72F9EC451D5E9ED8004AC8B6 /* SPUDownloadData.m in Sources */ = {isa = PBXBuildFile; fileRef = 72F9EC431D5E9ED8004AC8B6 /* SPUDownloadData.m */; };
 		72F9EC481D5EA904004AC8B6 /* SPUUpdaterDelegate.h in Headers */ = {isa = PBXBuildFile; fileRef = 72F9EC471D5EA7D3004AC8B6 /* SPUUpdaterDelegate.h */; settings = {ATTRIBUTES = (Public, ); }; };
+		75709667053ACD97A7429E07 /* SPUHeadlessUserDriver.h in Headers */ = {isa = PBXBuildFile; fileRef = 7C9EE836A8449E0F363F7E47 /* SPUHeadlessUserDriver.h */; };
+		9328EB08163BA45AD58F2AC8 /* SPUHeadlessUserDriver.m in Sources */ = {isa = PBXBuildFile; fileRef = A444E1A92967D436041BC0FA /* SPUHeadlessUserDriver.m */; };
 		72FE54422E56A14100227A91 /* SUUpdateAlert.xib in Resources */ = {isa = PBXBuildFile; fileRef = 72FE54412E56A14100227A91 /* SUUpdateAlert.xib */; };
 		C23E885B1BE7B24F0050BB73 /* SparkleTestCodeSignApp.enc.dmg in Resources */ = {isa = PBXBuildFile; fileRef = C23E88591BE7AF890050BB73 /* SparkleTestCodeSignApp.enc.dmg */; };
 		EA1E281722B645AE004AA304 /* libbsdiff.a in Frameworks */ = {isa = PBXBuildFile; fileRef = EA1E280F22B64522004AA304 /* libbsdiff.a */; };
@@ -1381,9 +1383,11 @@
 		72F9EC421D5E9ED8004AC8B6 /* SPUDownloadData.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SPUDownloadData.h; sourceTree = "<group>"; };
 		72F9EC431D5E9ED8004AC8B6 /* SPUDownloadData.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = SPUDownloadData.m; sourceTree = "<group>"; };
 		72F9EC471D5EA7D3004AC8B6 /* SPUUpdaterDelegate.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = SPUUpdaterDelegate.h; sourceTree = "<group>"; };
+		7C9EE836A8449E0F363F7E47 /* SPUHeadlessUserDriver.h */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.c.h; path = SPUHeadlessUserDriver.h; sourceTree = "<group>"; };
 		72FE54412E56A14100227A91 /* SUUpdateAlert.xib */ = {isa = PBXFileReference; lastKnownFileType = file.xib; path = SUUpdateAlert.xib; sourceTree = "<group>"; };
 		8DC2EF5A0486A6940098B216 /* Sparkle-Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; path = "Sparkle-Info.plist"; sourceTree = "<group>"; };
 		8DC2EF5B0486A6940098B216 /* Sparkle.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Sparkle.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		A444E1A92967D436041BC0FA /* SPUHeadlessUserDriver.m */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = sourcecode.c.objc; path = SPUHeadlessUserDriver.m; sourceTree = "<group>"; };
 		A5BF4F1B1BC7668B007A052A /* SUTestWebServer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SUTestWebServer.h; sourceTree = "<group>"; };
 		A5BF4F1C1BC7668B007A052A /* SUTestWebServer.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = SUTestWebServer.m; sourceTree = "<group>"; };
 		C23E88591BE7AF890050BB73 /* SparkleTestCodeSignApp.enc.dmg */ = {isa = PBXFileReference; lastKnownFileType = file; path = SparkleTestCodeSignApp.enc.dmg; sourceTree = "<group>"; };
@@ -1644,7 +1648,7 @@
 			name = Products;
 			sourceTree = "<group>";
 		};
-		0867D691FE84028FC02AAC07 /* Sparkle */ = {
+		0867D691FE84028FC02AAC07 = {
 			isa = PBXGroup;
 			children = (
 				723DFF962B3DFF6E00628E6C /* Package.swift */,
@@ -2007,7 +2011,6 @@
 				72AEB1D629A1CB510033883E /* SPUNoUpdateFoundInfo.h */,
 				72AEB1D729A1CB510033883E /* SPUNoUpdateFoundInfo.m */,
 			);
-			includeInIndex = 1;
 			name = "Other Sources";
 			sourceTree = "<group>";
 		};
@@ -2210,6 +2213,8 @@
 				7269E49C2648FC6C0088C213 /* SPUUserUpdateState+Private.h */,
 				7269E4992648F7C00088C213 /* SPUUserUpdateState.m */,
 				725CB9561C7120410064365A /* SPUUserDriver.h */,
+				7C9EE836A8449E0F363F7E47 /* SPUHeadlessUserDriver.h */,
+				A444E1A92967D436041BC0FA /* SPUHeadlessUserDriver.m */,
 			);
 			name = "User Driver";
 			sourceTree = "<group>";
@@ -2545,6 +2550,7 @@
 				3772FEA913DE0B6B00F79537 /* SUVersionDisplayProtocol.h in Headers */,
 				724BB3871D32A167005D534A /* SUXPCInstallerConnection.h in Headers */,
 				724BB3A81D33461B005D534A /* SUXPCInstallerStatus.h in Headers */,
+				75709667053ACD97A7429E07 /* SPUHeadlessUserDriver.h in Headers */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -3062,7 +3068,7 @@
 				zh_HK,
 				nn,
 			);
-			mainGroup = 0867D691FE84028FC02AAC07 /* Sparkle */;
+			mainGroup = 0867D691FE84028FC02AAC07;
 			packageReferences = (
 				727DBAE326B5BBFD00111F0C /* XCRemoteSwiftPackageReference "swift-argument-parser" */,
 			);
@@ -3620,6 +3626,7 @@
 				724BB3881D32A167005D534A /* SUXPCInstallerConnection.m in Sources */,
 				724BB3A91D33461B005D534A /* SUXPCInstallerStatus.m in Sources */,
 				723AC011259DBDAA00BDB4FA /* SUReleaseNotesCommon.m in Sources */,
+				9328EB08163BA45AD58F2AC8 /* SPUHeadlessUserDriver.m in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
--- /dev/null
+++ b/third_party/sparkle/Sparkle/SPUHeadlessUserDriver.h
@@ -0,0 +1,29 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#ifndef THIRD_PARTY_SPARKLE_SPARKLE_SPUHEADLESSUSERDRIVER_H_
+#define THIRD_PARTY_SPARKLE_SPARKLE_SPUHEADLESSUSERDRIVER_H_
+
+#import <Foundation/Foundation.h>
+
+#if defined(BUILDING_SPARKLE_SOURCES_EXTERNALLY)
+// Ignore incorrect warning
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wquoted-include-in-framework-header"
+#import "SPUUserDriver.h"
+#import "SUExport.h"
+#pragma clang diagnostic pop
+#else
+#import <Sparkle/SPUUserDriver.h>
+#import <Sparkle/SUExport.h>
+#endif
+
+NS_ASSUME_NONNULL_BEGIN
+
+SU_EXPORT @interface SPUHeadlessUserDriver : NSObject <SPUUserDriver>
+@end
+
+NS_ASSUME_NONNULL_END
+
+#endif  /* THIRD_PARTY_SPARKLE_SPARKLE_SPUHEADLESSUSERDRIVER_H_ */
--- /dev/null
+++ b/third_party/sparkle/Sparkle/SPUHeadlessUserDriver.m
@@ -0,0 +1,82 @@
+// Copyright 2025 The Helium Authors
+// You can use, redistribute, and/or modify this source code under
+// the terms of the GPL-3.0 license that can be found in the LICENSE file.
+
+#import "SPUHeadlessUserDriver.h"
+#import <AppKit/AppKit.h>
+#import <Sparkle/Sparkle.h>
+
+@implementation SPUHeadlessUserDriver
+{}
+
+- (instancetype)initWithUpdatePermissionResponse:(nullable SUUpdatePermissionResponse *)updatePermissionResponse deferInstallation:(BOOL)deferInstallation verbose:(BOOL)verbose
+{
+    self = [super init];
+    return self;
+}
+
+- (void)showUpdatePermissionRequest:(SPUUpdatePermissionRequest *)__unused request reply:(void (^)(SUUpdatePermissionResponse *))reply
+{}
+
+- (void)showUserInitiatedUpdateCheckWithCancellation:(void (^)(void))__unused cancellation
+{}
+
+- (void)displayReleaseNotes:(const char * _Nullable)__unused releaseNotes SPU_OBJC_DIRECT
+{}
+
+- (void)displayHTMLReleaseNotes:(NSData *)__unused releaseNotes SPU_OBJC_DIRECT
+{}
+
+- (void)displayPlainTextReleaseNotes:(NSData *)__unused releaseNotes encoding:(NSStringEncoding)__unused encoding SPU_OBJC_DIRECT
+{}
+
+- (void)showUpdateWithAppcastItem:(SUAppcastItem *)__unused appcastItem updateAdjective:(NSString *)__unused updateAdjective
+{}
+
+- (void)showUpdateFoundWithAppcastItem:(SUAppcastItem *)__unused appcastItem state:(SPUUserUpdateState *)__unused state reply:(void (^)(SPUUserUpdateChoice))__unused reply
+{}
+
+- (void)showUpdateReleaseNotesWithDownloadData:(SPUDownloadData *)__unused downloadData
+{}
+
+- (void)showUpdateReleaseNotesFailedToDownloadWithError:(NSError *)__unused error
+{}
+
+- (void)showUpdateNotFoundWithError:(NSError *)__unused error acknowledgement:(void (^)(void))acknowledgement
+{
+    acknowledgement();
+}
+
+- (void)showUpdaterError:(NSError *)__unused error acknowledgement:(void (^)(void))acknowledgement
+{
+    acknowledgement();
+}
+
+- (void)showDownloadInitiatedWithCancellation:(void (^)(void))__unused cancellation
+{}
+
+- (void)showDownloadDidReceiveExpectedContentLength:(uint64_t)__unused expectedContentLength
+{}
+
+- (void)showDownloadDidReceiveDataOfLength:(uint64_t)__unused length
+{}
+
+- (void)showDownloadDidStartExtractingUpdate
+{}
+
+- (void)showExtractionReceivedProgress:(double)__unused progress
+{}
+
+- (void)showReadyToInstallAndRelaunch:(void (^)(SPUUserUpdateChoice))__unused installUpdateHandler
+{}
+
+- (void)showInstallingUpdateWithApplicationTerminated:(BOOL)__unused applicationTerminated retryTerminatingApplication:(void (^)(void))__unused retryTerminatingApplication
+{}
+
+- (void)showUpdateInstalledAndRelaunched:(BOOL)__unused relaunched acknowledgement:(void (^)(void))acknowledgement
+{}
+
+- (void)dismissUpdateInstallation
+{}
+
+@end
--- a/chrome/browser/app_controller_mac.mm
+++ b/chrome/browser/app_controller_mac.mm
@@ -38,6 +38,7 @@
 #include "chrome/browser/browser_features.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/browser_process_platform_part.h"
+#include "chrome/browser/buildflags.h"
 #include "chrome/browser/command_updater_impl.h"
 #include "chrome/browser/download/download_core_service.h"
 #include "chrome/browser/download/download_core_service_factory.h"
@@ -47,6 +48,9 @@
 #include "chrome/browser/lifetime/browser_shutdown.h"
 #include "chrome/browser/mac/auth_session_request.h"
 #include "chrome/browser/mac/key_window_notifier.h"
+#if BUILDFLAG(IS_MAC) && BUILDFLAG(ENABLE_SPARKLE)
+#include "chrome/browser/mac/sparkle_glue.h"
+#endif
 #include "chrome/browser/policy/chrome_browser_policy_connector.h"
 #include "chrome/browser/prefs/incognito_mode_prefs.h"
 #include "chrome/browser/profiles/keep_alive/profile_keep_alive_types.h"
@@ -872,6 +876,9 @@ class AppControllerNativeThemeObserver :
   NSWindow.allowsAutomaticWindowTabbing = NO;
 
   [self initShareMenu];
+#if BUILDFLAG(IS_MAC) && BUILDFLAG(ENABLE_SPARKLE)
+  helium::InitializeSparkleFramework();
+#endif
 }
 
 - (BOOL)tryToTerminateApplication:(NSApplication*)app {
--- a/chrome/browser/chrome_browser_main_mac.mm
+++ b/chrome/browser/chrome_browser_main_mac.mm
@@ -30,6 +30,9 @@
 #include "chrome/browser/first_run/first_run.h"
 #include "chrome/browser/mac/install_from_dmg.h"
 #include "chrome/browser/mac/metrics.h"
+#if BUILDFLAG(IS_MAC) && BUILDFLAG(ENABLE_SPARKLE)
+#include "chrome/browser/mac/sparkle_glue.h"
+#endif
 #include "chrome/browser/ui/cocoa/main_menu_builder.h"
 #include "chrome/browser/ui/cocoa/renderer_context_menu/chrome_swizzle_services_menu_updater.h"
 #include "chrome/browser/updater/browser_updater_client_util.h"
@@ -175,6 +178,11 @@ void ChromeBrowserMainPartsMac::PreProfi
 
 void ChromeBrowserMainPartsMac::PostProfileInit(Profile* profile,
                                                 bool is_initial_profile) {
+#if BUILDFLAG(IS_MAC) && BUILDFLAG(ENABLE_SPARKLE)
+  if (is_initial_profile) {
+    std::make_unique<VersionUpdaterSparkle>(profile);
+  }
+#endif
   ChromeBrowserMainPartsPosix::PostProfileInit(profile, is_initial_profile);
 }
 
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -59,6 +59,10 @@ if (is_win) {
   import("//build/config/win/manifest.gni")
 }
 
+if (is_mac) {
+  import("//chrome/updater/sparkle.gni")
+}
+
 assert(!is_fuchsia, "Fuchsia shouldn't use anything in //chrome")
 
 declare_args() {
@@ -108,6 +112,10 @@ buildflag_header("buildflags") {
     flags += [ "ENABLE_SEGMENT_HEAP=$enable_segment_heap" ]
   }
 
+  if (is_mac) {
+    flags += [ "ENABLE_SPARKLE=$enable_sparkle" ]
+  }
+
   # Android and ChromeOS don't support multiple browser processes, so they don't
   # employ ProcessSingleton.
   if (is_android || is_chromeos) {
@@ -6715,6 +6723,22 @@ static_library("browser") {
     weak_frameworks = [
       "ScreenCaptureKit.framework",  # Available in macOS 12.3, stable in 13.2.
     ]
+
+    if (enable_sparkle) {
+      include_dirs = [ "//third_party/sparkle" ]
+
+      sources += [
+        "mac/sparkle_glue.h",
+        "mac/sparkle_glue.mm",
+      ]
+
+      deps += [
+        "//third_party/sparkle:sparkle_framework",
+        "//components/helium_services",
+      ]
+      frameworks += [ "Sparkle.framework" ]
+    }
+
   }
 
   if (is_android || is_mac || is_win || is_chromeos) {
--- a/third_party/sparkle/Sparkle/SPUAutomaticUpdateDriver.m
+++ b/third_party/sparkle/Sparkle/SPUAutomaticUpdateDriver.m
@@ -144,4 +144,24 @@
     [_coreDriver abortUpdateAndShowNextUpdateImmediately:showNextUpdateImmediately error:error];
 }
 
+- (void)downloadDriverDidReceiveExpectedContentLength:(uint64_t)expectedContentLength
+{
+    [_userDriver showDownloadDidReceiveExpectedContentLength:expectedContentLength];
+}
+
+- (void)downloadDriverDidReceiveDataOfLength:(uint64_t)length
+{
+    [_userDriver showDownloadDidReceiveDataOfLength:length];
+}
+
+- (void)coreDriverDidStartExtractingUpdate
+{
+    [_userDriver showDownloadDidStartExtractingUpdate];
+}
+
+- (void)installerDidExtractUpdateWithProgress:(double)progress
+{
+    [_userDriver showExtractionReceivedProgress:progress];
+}
+
 @end
--- a/chrome/browser/buildflags.gni
+++ b/chrome/browser/buildflags.gni
@@ -3,6 +3,7 @@
 # found in the LICENSE file.
 
 import("//build/config/chrome_build.gni")
+import("//chrome/updater/sparkle.gni")
 
 declare_args() {
   # By default, only branded builds allow for platform experience.
@@ -13,5 +14,5 @@ declare_args() {
 
   # Detect updates and notify the user for Google Chrome across all platforms.
   # Chromium does not use an auto-updater.
-  enable_update_notifications = is_chrome_branded
+  enable_update_notifications = enable_sparkle
 }
--- a/third_party/sparkle/Configurations/strip-framework.sh
+++ b/third_party/sparkle/Configurations/strip-framework.sh
@@ -40,6 +40,11 @@ if [[ "$SPARKLE_BUILD_UI_BITS" -eq 0 ]];
     rm -rf "${FRAMEWORK_PATH}"/"Versions/"${FRAMEWORK_VERSION}"/Resources"/"ReleaseNotesColorStyle.css"
 fi
 
+# Remove headers
+
+find "$TARGET_BUILD_DIR" -name Headers -exec rm -rf {} \;
+find "$TARGET_BUILD_DIR" -name PrivateHeaders -exec rm -rf {} \;
+
 # Remove localization files if requested
 
 if [[ "$SPARKLE_COPY_LOCALIZATIONS" -eq 0 ]]; then
