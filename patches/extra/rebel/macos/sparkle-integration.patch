// Copyright 2015 The Chromium Authors
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google LLC nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

--- a/chrome/browser/lifetime/application_lifetime_desktop.cc
+++ b/chrome/browser/lifetime/application_lifetime_desktop.cc
@@ -14,6 +14,7 @@
 #include "base/time/time.h"
 #include "base/types/strong_alias.h"
 #include "build/build_config.h"
+#include "chrome/browser/buildflags.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/browser_process_platform_part.h"
 #include "chrome/browser/download/download_core_service.h"
@@ -55,6 +56,10 @@
 #include "chrome/browser/background/glic/glic_background_mode_manager.h"
 #endif
 
+#if BUILDFLAG(ENABLE_SPARKLE)
+#include "chrome/browser/mac/sparkle_glue.h"
+#endif
+
 namespace chrome {
 
 namespace {
@@ -107,6 +112,14 @@ void AttemptRestartInternal(IgnoreUnload
 #else   // !BUILDFLAG(IS_CHROMEOS).
   // Set the flag to restore state after the restart.
   pref_service->SetBoolean(prefs::kRestartLastSessionOnShutdown, true);
+
+#if BUILDFLAG(ENABLE_SPARKLE)
+  if (helium::ApplicationIsNearlyUpdated()) {
+    helium::RelaunchBrowserUsingSparkle();
+    return;
+  }
+#endif
+
   if (ignore_unload_handlers) {
     ExitIgnoreUnloadHandlers();
   } else {
--- /dev/null
+++ b/chrome/browser/mac/sparkle_glue.h
@@ -0,0 +1,85 @@
+// Copyright 2023 Viasat Inc. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the header of the corresponding patch.
+
+#ifndef REBEL_CHROME_BROWSER_MAC_SPARKLE_GLUE_H_
+#define REBEL_CHROME_BROWSER_MAC_SPARKLE_GLUE_H_
+
+#if defined(__OBJC__)
+
+#import <AppKit/AppKit.h>
+
+#include <memory>
+
+#include "base/callback_list.h"
+#include "base/compiler_specific.h"
+#include "base/memory/weak_ptr.h"
+#include "chrome/browser/ui/webui/help/version_updater.h"
+
+class Profile;
+
+@class SparkleObserver;
+
+using SparkleUpdaterCallbackList =
+    base::RepeatingCallbackList<void(VersionUpdater::Status, NSString*)>;
+
+// macOS Sparkle implementation of version update functionality, used by the
+// WebUI About/Help page and installed version poller.
+class VersionUpdaterSparkle : public VersionUpdater {
+ public:
+  ~VersionUpdaterSparkle() override;
+
+  // VersionUpdater implementation.
+  void CheckForUpdate(StatusCallback status_callback,
+                      PromoteCallback promote_callback) override;
+  void PromoteUpdater() override {}
+
+ private:
+  friend class VersionUpdater;
+
+  // Clients must use VersionUpdater::Create().
+  VersionUpdaterSparkle(Profile* profile);
+
+  VersionUpdaterSparkle(const VersionUpdaterSparkle&) = delete;
+  VersionUpdaterSparkle& operator=(const VersionUpdaterSparkle&) = delete;
+
+  // Sparkle's statuses processor method.
+  void UpdateStatus(Status status, NSString* error_string);
+  void UpdateStatusOnUIThread(Status status, NSString* error_string);
+
+  // Callback used to communicate update status to the client.
+  StatusCallback status_callback_;
+
+  // Callback used to show or hide the promote UI elements.
+  PromoteCallback promote_callback_;
+
+  // The observer that will receive Sparkle status updates.
+  base::CallbackListSubscription sparkle_subscription_;
+
+  base::WeakPtrFactory<VersionUpdaterSparkle> weak_ptr_factory_;
+};
+
+#endif  // __OBJC__
+
+// Functions that may be accessed from non-Objective-C C/C++ code.
+namespace rebel {
+
+// Attempt to relaunch browser and install updates if any.
+void RelaunchBrowserUsingSparkle();
+
+// Initializes Sparkle Framework with default values.
+void InitializeSparkleFramework();
+
+// True if Sparkle is enabled.
+bool SparkleEnabled();
+
+// The version of the application currently downloaded and ready to be installed
+// (with NEARLY_UPDATED status).
+std::u16string CurrentlyDownloadedVersion();
+
+// Check if current application has an update which is ready to be installed.
+bool ApplicationIsNearlyUpdated();
+
+}  // namespace rebel
+
+#endif  // REBEL_CHROME_BROWSER_MAC_SPARKLE_GLUE_H_
--- /dev/null
+++ b/chrome/browser/mac/sparkle_glue.mm
@@ -0,0 +1,397 @@
+// Copyright 2023 Viasat Inc. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the header of the corresponding patch.
+
+#include "rebel/chrome/browser/mac/sparkle_glue.h"
+
+#include "base/apple/foundation_util.h"
+#include "base/command_line.h"
+#include "base/functional/bind.h"
+#include "base/functional/callback_helpers.h"
+#include "base/logging.h"
+#include "base/sequence_checker.h"
+#include "base/strings/escape.h"
+#include "base/strings/sys_string_conversions.h"
+#include "base/strings/utf_string_conversions.h"
+#include "base/task/thread_pool.h"
+#include "build/branding_buildflags.h"
+#include "chrome/browser/obsolete_system/obsolete_system.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/ui/webui/help/version_updater.h"
+#include "chrome/grit/branded_strings.h"
+#include "chrome/grit/generated_resources.h"
+#include "content/public/browser/browser_task_traits.h"
+#include "content/public/browser/browser_thread.h"
+#include "content/public/browser/web_contents.h"
+#include "ui/base/l10n/l10n_util.h"
+
+#include "rebel/chrome/browser/channel_selection.h"
+#include "rebel/third_party/sparkle/src/Sparkle/Sparkle.h"
+
+namespace {
+
+class VersionUpdaterForTests : public VersionUpdater {
+ public:
+  ~VersionUpdaterForTests() override = default;
+
+  void CheckForUpdate(StatusCallback callback, PromoteCallback) override {
+    callback.Run(DISABLED, 0, false, false, std::string(), 0, std::u16string());
+  }
+
+  void PromoteUpdater() override {}
+
+ protected:
+  friend class VersionUpdater;
+
+  VersionUpdaterForTests() = default;
+
+ private:
+  VersionUpdaterForTests(const VersionUpdaterForTests&) = delete;
+  VersionUpdaterForTests& operator=(const VersionUpdaterForTests&) = delete;
+};
+
+}  // namespace
+
+// A version comparator to allow downgrading versions when the user has decided
+// to change channels.
+@interface ChannelRespectingVersionComparator : NSObject <SUVersionComparison>
+@end
+
+@implementation ChannelRespectingVersionComparator {
+  raw_ptr<Profile> profile_;
+}
+
+- (instancetype)initWithProfile:(Profile*)profile {
+  if ((self = [super init])) {
+    profile_ = profile;
+  }
+
+  return self;
+}
+
+- (NSComparisonResult)compareVersion:(NSString*)versionA
+                           toVersion:(NSString*)versionB {
+  if (rebel::DidUserSelectNewChannel(profile_->GetPrefs())) {
+    return NSOrderedAscending;
+  }
+
+  auto* comparator = [SUStandardVersionComparator defaultComparator];
+  return [comparator compareVersion:versionA toVersion:versionB];
+}
+
+@end
+
+// SparkleObserver is a simple notification observer for Sparkle status.
+@interface SparkleObserver : NSObject <SUUpdaterDelegate> {
+  SparkleUpdaterCallbackList status_callbacks_;
+  SEQUENCE_CHECKER(sequence_checker_);
+}
+
+// URL of the Sparkle appcast.xml file
+@property(nonatomic, strong) NSString* appcastFeedUrl;
+
+@end  // @interface SparkleObserver
+
+@implementation SparkleObserver {
+  raw_ptr<Profile> profile_;
+}
+
+@synthesize appcastFeedUrl = appcastFeedUrl_;
+
+- (id)initWithProfile:(Profile*)profile {
+  if ((self = [super init])) {
+    DETACH_FROM_SEQUENCE(sequence_checker_);
+
+    appcastFeedUrl_ = nil;
+    profile_ = profile;
+
+    [self registerAsSparkleObserver];
+    [SUUpdater sharedUpdater].delegate = self;
+  }
+
+  return self;
+}
+
+- (base::CallbackListSubscription)registerStatusCallback:
+    (SparkleUpdaterCallbackList::CallbackType)callback {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  return status_callbacks_.Add(std::move(callback));
+}
+
+- (void)dealloc {
+  [SUUpdater sharedUpdater].delegate = nil;
+  [self unregisterAsSparkleObserver];
+}
+
+- (void)registerAsSparkleObserver {
+  NSNotificationCenter* center = [NSNotificationCenter defaultCenter];
+  [center
+      addObserver:self
+         selector:@selector(handleUpdaterDidFinishLoadingAppCastNotification:)
+             name:SUUpdaterDidFinishLoadingAppCastNotification
+           object:nil];
+  [center addObserver:self
+             selector:@selector(handleUpdaterDidFindValidUpdateNotification:)
+                 name:SUUpdaterDidFindValidUpdateNotification
+               object:nil];
+  [center addObserver:self
+             selector:@selector
+             (handleUpdaterDidReachNearlyUpdatedStateNotification:)
+                 name:SUUpdaterDidReachNearlyUpdatedStateNotification
+               object:nil];
+  [center addObserver:self
+             selector:@selector(handleUpdaterDidNotFindUpdateNotification:)
+                 name:SUUpdaterDidNotFindUpdateNotification
+               object:nil];
+}
+
+- (void)unregisterAsSparkleObserver {
+  [[NSNotificationCenter defaultCenter] removeObserver:self];
+}
+
+// Received reply from server with a list of updates.
+- (void)handleUpdaterDidFinishLoadingAppCastNotification:
+    (NSNotification*)notification {
+  [self updateStatus:VersionUpdater::CHECKING error_string:nil];
+}
+
+// In the list of updates there is a valid update.
+- (void)handleUpdaterDidFindValidUpdateNotification:
+    (NSNotification*)notification {
+  [self updateStatus:VersionUpdater::UPDATING error_string:nil];
+}
+
+// There is a downloaded and unarchived version, waiting for application quit.
+- (void)handleUpdaterDidReachNearlyUpdatedStateNotification:
+    (NSNotification*)notification {
+  [self updateStatus:VersionUpdater::NEARLY_UPDATED error_string:nil];
+  rebel::StoreSelectedChannel(profile_->GetPrefs());
+}
+
+// In the list of updates there are no new version available.
+- (void)handleUpdaterDidNotFindUpdateNotification:
+    (NSNotification*)notification {
+  [self updateStatus:VersionUpdater::UPDATED error_string:nil];
+}
+
+// Delegated method. Error handler for the Sparkle messages.
+- (void)updater:(SUUpdater*)updater didAbortWithError:(NSError*)error {
+  if (error.code == SUNoUpdateError) {
+    // Handled by notifications
+    return;
+  }
+  [self updateStatus:VersionUpdater::FAILED
+        error_string:[error.localizedDescription copy]];
+}
+
+// Delegated method. Return the appcast URL for the installed channel.
+- (NSString*)feedURLStringForUpdater:(SUUpdater*)updater {
+  if (self.appcastFeedUrl != nil) {
+    return self.appcastFeedUrl;
+  }
+
+  std::string update_url = rebel::GetChannelUpdateURL(profile_->GetPrefs());
+
+  self.appcastFeedUrl =
+      [NSString stringWithCString:update_url.c_str()
+                         encoding:[NSString defaultCStringEncoding]];
+  return self.appcastFeedUrl;
+}
+
+// Delegated method. Override the version comparator to check if the user has
+// decided to switch channels.
+- (id<SUVersionComparison>)versionComparatorForUpdater:(SUUpdater*)updater {
+  return [[ChannelRespectingVersionComparator alloc] initWithProfile:profile_];
+}
+
+// Delegated method. Don't provide the currently installed version in the update
+// request if the user has decided to switch channels.
+- (BOOL)updateRequestShouldIncludeVersion:(SUUpdater*)updater {
+  return !rebel::DidUserSelectNewChannel(profile_->GetPrefs());
+}
+
+// Delegated method. When we don't provide the currently installed version in
+// the update request, we get a bunch of candidate updates. Choose the newest.
+- (SUAppcastItem*)bestValidUpdateInAppcast:(SUAppcast*)appcast
+                                forUpdater:(SUUpdater*)updater {
+  SUAppcastItem* item = nil;
+
+  if (rebel::DidUserSelectNewChannel(profile_->GetPrefs())) {
+    auto* comparator = [SUStandardVersionComparator defaultComparator];
+
+    for (SUAppcastItem* candidate in appcast.items) {
+      if (!item || ([comparator compareVersion:item.versionString
+                                     toVersion:candidate.versionString] ==
+                    NSOrderedAscending)) {
+        item = candidate;
+      }
+    }
+  }
+
+  return item;
+}
+
+- (void)updateStatus:(VersionUpdater::Status)status
+        error_string:(NSString*)error_string {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  status_callbacks_.Notify(status, error_string);
+}
+
+@end  // @implementation SparkleObserver
+
+std::unique_ptr<VersionUpdater> VersionUpdater::Create(
+    content::WebContents* web_contents) {
+  if (rebel::SparkleEnabled()) {
+    auto* profile =
+        Profile::FromBrowserContext(web_contents->GetBrowserContext());
+
+    if (profile) {
+      return base::WrapUnique(new VersionUpdaterSparkle(profile));
+    }
+  }
+
+  return base::WrapUnique(new VersionUpdaterForTests);
+}
+
+VersionUpdaterSparkle::VersionUpdaterSparkle(Profile* profile)
+    : weak_ptr_factory_(this) {
+  // Ensure the Sparkle observer is only created once because there is only a
+  // single Sparkle instance. We do not want to reset Sparkle's delegate, etc.
+  static SparkleObserver* sparkle_observer = nil;
+  static dispatch_once_t token;
+
+  dispatch_once(&token, ^{
+    sparkle_observer = [[SparkleObserver alloc] initWithProfile:profile];
+  });
+
+  sparkle_subscription_ = [sparkle_observer
+      registerStatusCallback:base::BindRepeating(
+                                 &VersionUpdaterSparkle::UpdateStatus,
+                                 weak_ptr_factory_.GetWeakPtr())];
+}
+
+VersionUpdaterSparkle::~VersionUpdaterSparkle() = default;
+
+void VersionUpdaterSparkle::CheckForUpdate(StatusCallback status_callback,
+                                           PromoteCallback promote_callback) {
+  // Copy the callbacks, we will re-use this for the remaining lifetime
+  // of this object.
+  status_callback_ = status_callback;
+  promote_callback_ = promote_callback;
+
+  SUUpdater* updater = [SUUpdater sharedUpdater];
+  if (updater) {
+    if (updater.isNearlyUpdated) {
+      // When updater already has update, don't interrupt it by new check,
+      // instead suggest user to "Relaunch" browser.
+      UpdateStatus(NEARLY_UPDATED, nil);
+    } else {
+      // Set initial status to CHECKING, callback will advance that status as
+      // progress of updates continue.
+      UpdateStatus(CHECKING, nil);
+      // Launch a new update check, even if one was already completed, because
+      // a new update may be available or a new update may have been installed
+      // in the background since the last time the Help page was displayed.
+      [updater checkForUpdatesInBackground];
+    }
+  } else {
+    // There is no glue, or the application is on a read-only filesystem.
+    // Updates and promotions are impossible.
+    status_callback_.Run(DISABLED, 0, false, false, std::string(), 0,
+                         std::u16string());
+  }
+}
+
+void VersionUpdaterSparkle::UpdateStatus(Status status,
+                                         NSString* error_string) {
+  content::GetUIThreadTaskRunner({})->PostTask(
+      FROM_HERE,
+      base::BindOnce(&VersionUpdaterSparkle::UpdateStatusOnUIThread,
+                     weak_ptr_factory_.GetWeakPtr(), status, error_string));
+}
+
+void VersionUpdaterSparkle::UpdateStatusOnUIThread(Status status,
+                                                   NSString* error_string) {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
+  if (status_callback_.is_null()) {
+    return;
+  }
+
+  std::string error_messages = base::SysNSStringToUTF8(
+      base::apple::ObjCCastStrict<NSString>(error_string));
+  std::u16string message;
+
+  // If we have an error to display, include the detail messages
+  // below the error in a <pre> block. Don't bother displaying detail messages
+  // on a success/in-progress/indeterminate status.
+  if (!error_messages.empty()) {
+    VLOG(1) << "Update error messages: " << error_messages;
+
+    if (status == FAILED) {
+      if (!message.empty()) {
+        message += base::UTF8ToUTF16(std::string("<br/><br/>"));
+      }
+
+      message += l10n_util::GetStringUTF16(IDS_UPGRADE_ERROR_DETAILS);
+      message += base::UTF8ToUTF16(std::string("<br/><pre>"));
+      message += base::UTF8ToUTF16(base::EscapeForHTML(error_messages));
+      message += base::UTF8ToUTF16(std::string("</pre>"));
+    }
+  }
+
+  status_callback_.Run(status, 0, false, false, std::string(), 0, message);
+}
+
+namespace rebel {
+
+void RelaunchBrowserUsingSparkle() {
+  // Tell Sparkle to restart if possible.
+  SUUpdater* updater = [SUUpdater sharedUpdater];
+  if (updater) {
+    [updater forceInstallAndRelaunch];
+  }
+}
+
+void InitializeSparkleFramework() {
+  SUUpdater* updater = [SUUpdater sharedUpdater];
+  if (updater) {
+    updater.automaticallyChecksForUpdates = YES;
+    updater.automaticallyDownloadsUpdates = YES;
+  }
+}
+
+bool SparkleEnabled() {
+#if BUILDFLAG(REBEL_SPARKLE_ENABLED)
+  if (base::apple::AmIBundled()) {
+    return [SUUpdater sharedUpdater] != nil;
+  }
+#endif
+
+  return false;
+}
+
+std::u16string CurrentlyDownloadedVersion() {
+  SUUpdater* updater = [SUUpdater sharedUpdater];
+  if (!updater) {
+    return std::u16string();
+  }
+
+  NSString* version = updater.nearlyUpdatedVersionString;
+  if (!version) {
+    return std::u16string();
+  }
+
+  return base::SysNSStringToUTF16(
+      base::apple::ObjCCastStrict<NSString>(version));
+}
+
+bool ApplicationIsNearlyUpdated() {
+  SUUpdater* updater = [SUUpdater sharedUpdater];
+  if (!updater) {
+    return false;
+  }
+
+  return updater.isNearlyUpdated;
+}
+
+}  // namespace rebel
--- a/chrome/browser/upgrade_detector/get_installed_version_mac.mm
+++ b/chrome/browser/upgrade_detector/get_installed_version_mac.mm
@@ -13,14 +13,27 @@
 #include "base/version.h"
 #include "chrome/browser/updater/browser_updater_client_util.h"
 
+#include "build/branding_buildflags.h"  // Needed for REBEL_BROWSER.
+#if BUILDFLAG(REBEL_BROWSER)
+#include "base/strings/utf_string_conversions.h"
+#include "rebel/chrome/browser/mac/sparkle_glue.h"
+#endif
+
 void GetInstalledVersion(InstalledVersionCallback callback) {
   base::ThreadPool::PostTaskAndReplyWithResult(
       FROM_HERE,
       {base::MayBlock(), base::TaskPriority::BEST_EFFORT,
        base::TaskShutdownBehavior::CONTINUE_ON_SHUTDOWN},
+#if BUILDFLAG(REBEL_BROWSER)
+      base::BindOnce([] {
+        return InstalledAndCriticalVersion(base::Version(
+            base::UTF16ToASCII(rebel::CurrentlyDownloadedVersion())));
+      }),
+#else
       base::BindOnce([] {
         return InstalledAndCriticalVersion(
             base::Version(CurrentlyInstalledVersion()));
       }),
+#endif
       std::move(callback));
 }
--- /dev/null
+++ b/third_party/sparkle/BUILD.gn
@@ -0,0 +1,43 @@
+# Copyright 2023 Viasat Inc. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the header of the corresponding patch.
+
+assert(is_mac)
+
+import("//build/config/mac/rules.gni")
+
+bundle_data("sparkle_framework") {
+  public_deps = [ ":build_sparkle_framework" ]
+
+  sources = [ "$root_out_dir/Sparkle.framework" ]
+  outputs = [ "{{bundle_contents_dir}}/Frameworks/{{source_file_part}}" ]
+}
+
+action("build_sparkle_framework") {
+  script = "build_sparkle_framework.py"
+
+  sources = [ "src/REVISION" ]
+  outputs = [ "$root_out_dir/Sparkle.framework" ]
+}
+
+config("sparkle_link_test") {
+  ldflags = [
+    "-rpath",
+    "@executable_path",
+    "-F",
+    rebase_path(root_out_dir),
+    "-framework",
+    "Sparkle",
+  ]
+}
+
+config("sparkle_link_framework") {
+  ldflags = [
+    "-rpath",
+    "@loader_path/Frameworks",
+    "-F",
+    rebase_path(root_out_dir),
+    "-framework",
+    "Sparkle",
+  ]
+}
--- /dev/null
+++ b/third_party/sparkle/build_sparkle_framework.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+
+# Copyright 2023 Viasat Inc. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the header of the corresponding patch.
+import os
+import subprocess
+import sys
+
+# In-order targets to build
+TARGETS = ['bsdiff', 'ed25519', 'Sparkle']
+
+class ChangeDirectory(object):
+  """
+  Context manager for temporarily changing the working directory.
+  """
+  def __init__(self, working_dir):
+    self.saved_working_dir = os.getcwd()
+    self.working_dir = working_dir
+
+  def __enter__(self):
+    os.chdir(self.working_dir)
+
+  def __exit__(self, *args, **kwargs):
+    os.chdir(self.saved_working_dir)
+
+def main(args):
+  build_dir = 'CONFIGURATION_BUILD_DIR=' + os.getcwd()
+
+  sparkle_dir = os.path.join(
+    os.path.dirname(os.path.realpath(__file__)),
+    'src'
+  )
+
+  with ChangeDirectory(sparkle_dir):
+    for target in TARGETS:
+      command = [
+        'xcodebuild',
+        '-target',
+        target,
+        '-configuration',
+        'Release',
+        build_dir,
+        'build',
+      ]
+
+      with open(os.devnull, 'w') as dev_null:
+        if subprocess.check_call(command, stdout=dev_null) != 0:
+          return 1
+
+  return 0
+
+if __name__ == '__main__':
+  sys.exit(main(sys.argv))
